# TODO: Change the name of the org 
org: lppolletta
app: serverless-message-app
service: serverless-message-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  # Use these variables in the functions and resouorces section below. For example, 
  # ${self:provider.environment.MESSAGES_S3_BUCKET}
  environment:
    MESSAGES_TABLE: Messages-${self:provider.stage}
    CONNECTIONS_TABLE: Connections-${self:provider.stage}
    MESSAGES_CREATED_AT_INDEX: CreatedAtIndex
    MESSAGES_S3_BUCKET: serverless-lpp-cap-messages-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  logs:
    # Enable API Gateway logs
    restApi: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: "*"


custom:
  topicName: MessagesTopic-${self:provider.stage}
  documentation:
    api:
      info:
        version: v1.0.0
        title: Udagram API
        description: Serverless application for message sharing

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function - 
  # Provide iamRoleStatements property for performing Actions on DynamoDB
  GetMessages:
    handler: src/lambda/http/getMessages.handler
    events:
      - http:
          method: get
          path: messages
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: !GetAtt MessagesTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MESSAGES_TABLE}/index/${self:provider.environment.MESSAGES_CREATED_AT_INDEX}

  # TODO: Configure this function - 
  # Provide iamRoleStatements property. Decide the Actions and AWS Resource. 
  # To refer to an AWS resource defined in the "Resources" section, you can use "Resource: !GetAtt <resource-name>.Arn"
  # To validate incoming HTTP requests, we have provided the request schemas in function definition below. 
  CreateMessage:
    handler: src/lambda/http/createMessage.handler
    events:
      - http:
          method: post
          path: messages
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/create-message-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt MessagesTable.Arn

  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements, and request schemas
  UpdateMessage:
    handler: src/lambda/http/updateMessage.handler
    events:
      - http:
          method: patch
          path: messages/{messageId}
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/update-message-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt MessagesTable.Arn

  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  DeleteMessage:
    handler: src/lambda/http/deleteMessage.handler
    events:
      - http:
          method: delete
          path: messages/{messageId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.MESSAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt MessagesTable.Arn

  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: messages/{messageId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.MESSAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: !GetAtt MessagesTable.Arn

  SendUploadNotifications:
    environment:
      STAGE: ${self:provider.stage}
      API_ID:
        Ref: WebsocketsApi
    handler: src/dataLayer/sendNotifications.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:DeleteItem
          - dynamodb:PutItem 
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}
      - Effect: Allow
        Action:
          - execute-api:ManageConnections
        Resource: arn:aws:execute-api:us-east-1
  
  ConnectHandler:
    handler: src/lambda/websocket/connect.handler
    events:
      - websocket:
          route: $connect
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:PutItem 
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

  DisconnectHandler:
    handler: src/lambda/websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

resources:
  Resources:
    # Add necessary AWS resources. You will need at least the following AWS resources
    # TODO: Fill the properties
    # Feel free to change the names as you like. 
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    # TODO: Create a DynamoDB table with local secondary index and a composite key
    MessagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: messageId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: messageId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.MESSAGES_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.MESSAGES_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    ConnectionsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}

    # TODO: Complete the bucket properties below. 
    # Do not forget to add the CorsConfiguration propoerty
    MessagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.MESSAGES_S3_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref MessagesTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    # TODO: Complete the policy below and attach it to the bucket defined above
    # For cross referencing the name of the bucket, use "!Ref MessagesBucket"
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MessageBucketPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.MESSAGES_S3_BUCKET}/*'
        Bucket: !Ref MessagesBucket

    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref MessagesTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.MESSAGES_S3_BUCKET}
        Topics:
          - !Ref MessagesTopic

    MessagesTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Message bucket topic
        TopicName: ${self:custom.topicName}